<?php
/* LoyaltyLion Coupon Import API 
*
* @category LoyaltyLion
* @package LoyaltyLion_CouponImport
* @author Patrick Molgaard 
*/
class LoyaltyLion_CouponImport_Model_Api2_Coupon_Rest_Admin_V1 extends LoyaltyLion_CouponImport_Model_Api2_Coupon
{
    /**
     * Import LoyaltyLion coupons
     *
     * @param array $coupons
     * @return string|void
     */
    protected function _multiCreate($coupons)
    {
        $ruleId = $this->getRequest()->getParam('rule_id');
        $rule = $this->_loadSalesRule($ruleId);

        $coupon = Mage::getModel('salesrule/coupon');
        $now = $rule->getResource()->formatDate(
            Mage::getSingleton('core/date')->gmtTimestamp()
        );
	//TODO: infer from parent rule
	$expirationDate = '2025-01-01 00:00:00';
	foreach ($coupons as $cpn) {
            $coupon->setId(null)
                ->setRuleId($ruleId)
                ->setUsageLimit(1)
                ->setUsagePerCustomer(1)
                ->setExpirationDate($expirationDate)
                ->setCreatedAt($now)
                ->setType(Mage_SalesRule_Helper_Coupon::COUPON_TYPE_SPECIFIC_AUTOGENERATED)
                ->setCode($cpn['code'])
                ->save();
	}
    }
    /**
     * Retrieve list of coupon codes.
     *
     * @return array
     */
    protected function _retrieveCollection()
    {
        $ruleId = $this->getRequest()->getParam('rule_id');
        $rule = $this->_loadSalesRule($ruleId);
        /** @var Mage_SalesRule_Model_Resource_Coupon_Collection $collection  */
        $collection = Mage::getResourceModel('salesrule/coupon_collection');
        $collection->addRuleToFilter($rule);
        $this->_applyCollectionModifiers($collection);
        $data = $collection->load()->toArray();
        return $data['items'];
    }
    /**
     * Load sales rule by ID.
     *
     * @param int $ruleId
     * @return Mage_SalesRule_Model_Rule
     */
    protected function _loadSalesRule($ruleId)
    {
        if (!$ruleId) {
            $this->_critical(Mage::helper('salesrule')
                ->__('Rule ID not specified.'), Mage_Api2_Model_Server::HTTP_BAD_REQUEST);
        }
        $rule = Mage::getModel('salesrule/rule')->load($ruleId);
        if (!$rule->getId()) {
            $this->_critical(Mage::helper('salesrule')
                ->__('Rule was not found.'), Mage_Api2_Model_Server::HTTP_NOT_FOUND);
        }
        return $rule;
    }
}
